# -*- coding: utf-8 -*-
"""Electric Vehicle Registration Data Analysis :.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zt75W4X5bS-dG1lx-KA9AzEohhFyESmC

#-: ùîΩùïÄ‚Ñïùî∏ùïÉ ‚Ñô‚ÑùùïÜùïÅùîº‚ÑÇùïã - ùïä‚Ñùùîºùîºùîª‚Ñçùî∏‚Ñù :-

#Electric Vehicle Registration Data Analysis :
"""

import pandas as pd
df = pd.read_csv('/content/Electric_Vehicle_Registration_Data.csv')
df.head ()

df.drop(columns = ["ID"]).describe()

df.shape

cat_columns = df.select_dtypes(include = "O")
num_columns = df.drop(columns = ["ID"]).select_dtypes(include = "number")
print("Categarical Columns", list(cat_columns))
print("Numerical Columns", list(num_columns))

"""#EDA"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#bar chart
plt.figure(figsize = (8, 3), facecolor = "yellow", edgecolor = "black")
df['Vehicle Make'].value_counts().head(10).plot(kind='bar')
plt.title('Top 10 Vehicle Makes by Number of Electric Vehicles Registered')
plt.xlabel('Vehicle Make')
plt.ylabel('Number of Vehicles')
plt.show()

# bar chart
plt.figure(figsize = (10, 7), facecolor = "gray", edgecolor = "black")
sns.countplot(x='Vehicle Type', data=df)
plt.title('Number of Electric Vehicles Registered by Vehicle types')
plt.xlabel('Vehicle types')
plt.ylabel('Number of Vehicles')
plt.show()

#bar chart
plt.figure(figsize=(17,6),facecolor = "skyblue")
sns.countplot(x='Vehicle Year' , hue='Vehicle Type', data=df)
plt.title('Number of Electric Vehicles Registered by Vehicle Type and Year')
plt.xlabel('Vehicle Year')
plt.ylabel('Number of Vehicles')
plt.show()

num_columns = ['Vehicle Weight', 'Vehicle Year', 'Vehicle Declared Gross Weight', 'Vehicle Recorded GVWR']
plt.figure(figsize=(16, 10),facecolor = "skyblue")
for i, col in enumerate(num_columns, 1):
    plt.subplot(2, 2, i)
    sns.histplot(data=df, x=col, kde=True, bins=30, color='red')
    plt.title(f'Distribution of {col}')
plt.tight_layout()
plt.show()

#pie chart
plt.figure(figsize=(10,8),facecolor = "skyblue")
df['Vehicle Make'].value_counts().head(10).plot(kind='pie', autopct='%1.1f%%')
plt.title('top 10 Electric Vehicles Registered by Vehicle Make')
plt.show()

#pie chart
plt.figure(figsize=(10,8),facecolor = "lightgreen" )
df['Vehicle Model'].value_counts().head(10).plot(kind='pie', autopct='%1.1f%%')
plt.title('Top 10 Electric Vehicles Registered by Vehicle Model')
plt.show()

#scatter plot
plt.figure(figsize=(10,6), facecolor = "skyblue")
sns.scatterplot(x='Vehicle Weight', y='Registration Usage', data=df)
plt.title('Relationship Between Vehicle Weight and Registration usage')
plt.xlabel('Vehicle Weight')
plt.ylabel('Registration Usage')
plt.grid(axis = "y", color = "black", linestyle = "dotted", zorder = 1)
plt.show()

#scatter plot
plt.figure(figsize=(10,6),facecolor = "lightgreen")
sns.scatterplot(x='Vehicle Year', y='Registration Usage', data=df)
plt.title('Relationship Between Vehicle Year and Registration usage')
plt.xlabel('Vehicle Year')
plt.grid(axis = "x", color = "black", linestyle = "dotted", zorder = 1)
plt.grid(axis = "y", color = "black", linestyle = "dotted", zorder = 1)
plt.ylabel('Registration usage')
plt.show()

#scatter plot
plt.figure(figsize=(10,6),facecolor = "skyblue")
sns.scatterplot(x='Type', y='Registration Usage', data=df)
plt.title('Relationship Between type and Registration usage',fontsize = 13, fontweight = "bold", color = "blue")
plt.xlabel('Type')
plt.ylabel('Registration usage')
plt.grid(axis = "y", color = "black", linestyle = "dotted", zorder = 1)
plt.show()

#scatter plot
plt.figure(figsize=(10,6),facecolor = "lightgreen")
sns.scatterplot(x='Fuel Code', y='Registration Usage', data=df)
plt.title("Relationship Between Fuel Code and Registration usage", fontsize = 13, fontweight = "bold", color = "red")
plt.xlabel('Fuel Code')
plt.ylabel('Registration usage')
plt.grid(axis = "x", color = "black", linestyle = "dotted", zorder = 1)
plt.grid(axis = "y", color = "black", linestyle = "dotted", zorder = 1)
plt.show()

plt.figure(figsize = (15, 8), facecolor = "gray", edgecolor = "white")
for i, j in enumerate(num_columns, 1):
  plt.subplot(2, 2, i)
  fig4 = sns.kdeplot(data = df, x = j, color = "red", linewidth = 4)
  fig4.set_facecolor("pink")
  plt.title(j, fontsize = 20, fontweight = "bold", color = "black")
plt.tight_layout()
plt.show()
#GVWR stands for Gross Vehicle Weight Rating

I'm plt.figure(figsize=(8,5), facecolor = "skyblue")
sns.heatmap(df[['Vehicle Weight', 'Vehicle Year', 'Vehicle Declared Gross Weight', 'Vehicle Recorded GVWR']].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation between Numerical Columns')
plt.show()

#Box Plot for Vehicle Year by Vehicle Type:

plt.figure(figsize=(10,6),facecolor = "gray", edgecolor = "white")
sns.boxplot(x='Vehicle Type', y='Vehicle Year', data=df)
plt.title('Distribution of Vehicle Years by Vehicle Type')
plt.xlabel('Vehicle Type')
plt.ylabel('Vehicle Year')
plt.show()

"""# MODELS"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

X = df[['Vehicle Weight', 'Vehicle Year', 'Vehicle Declared Gross Weight', 'Vehicle Recorded GVWR']]
y = df['Registration Usage']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

from sklearn.linear_model import LogisticRegression

X = df[['Vehicle Weight', 'Vehicle Year', 'Vehicle Declared Gross Weight', 'Vehicle Recorded GVWR']]
y = df['Registration Usage']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

logistic_regression_model = LogisticRegression(max_iter=1000)

logistic_regression_model.fit(X_train, y_train)

y_pred = logistic_regression_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

X = df[['Vehicle Weight', 'Vehicle Year', 'Vehicle Declared Gross Weight', 'Vehicle Recorded GVWR']]
y = df['Vehicle Type']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

decision_tree_model = DecisionTreeClassifier()
decision_tree_model.fit(X_train, y_train)

y